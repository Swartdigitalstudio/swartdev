var bit_filepond_plugin_file_validate_type=function(){"use strict";const e=({addFilter:e,utils:t})=>{const{Type:i,isString:E,replaceInString:T,guesstimateMimeType:n,getExtensionFromFilename:l,getFilenameFromURL:_}=t,a=(e,t)=>e.some((e=>{return/\*$/.test(e)?(i=e,(/^[^/]+/.exec(t)||[]).pop()===i.slice(0,-2)):e===t;var i})),o=(e,t,i)=>{if(0===t.length)return!0;const T=(e=>{let t="";if(E(e)){const i=_(e),E=l(i);E&&(t=n(E))}else t=e.type;return t})(e);return i?new Promise(((E,n)=>{i(e,T).then((e=>{a(t,e)?E():n()})).catch(n)})):a(t,T)};return e("SET_ATTRIBUTE_TO_OPTION_MAP",(e=>Object.assign(e,{accept:"acceptedFileTypes"}))),e("ALLOW_HOPPER_ITEM",((e,{query:t})=>!t("GET_ALLOW_FILE_TYPE_VALIDATION")||o(e,t("GET_ACCEPTED_FILE_TYPES")))),e("LOAD_FILE",((e,{query:t})=>new Promise(((i,E)=>{if(!t("GET_ALLOW_FILE_TYPE_VALIDATION"))return void i(e);const n=t("GET_ACCEPTED_FILE_TYPES"),l=t("GET_FILE_VALIDATE_TYPE_DETECT_TYPE"),_=o(e,n,l),a=()=>{const e=n.map((i=t("GET_FILE_VALIDATE_TYPE_LABEL_EXPECTED_TYPES_MAP"),e=>null!==i[e]&&(i[e]||e))).filter((e=>!1!==e));var i;const l=e.filter((function(t,i){return e.indexOf(t)===i}));E({status:{main:t("GET_LABEL_FILE_TYPE_NOT_ALLOWED"),sub:T(t("GET_FILE_VALIDATE_TYPE_LABEL_EXPECTED_TYPES"),{allTypes:l.join(", "),allButLastType:l.slice(0,-1).join(", "),lastType:l[e.length-1]})}})};if("boolean"==typeof _)return _?i(e):a();_.then((()=>{i(e)})).catch(a)})))),{options:{allowFileTypeValidation:[!0,i.BOOLEAN],acceptedFileTypes:[[],i.ARRAY],labelFileTypeNotAllowed:["File is of invalid type",i.STRING],fileValidateTypeLabelExpectedTypes:["Expects {allButLastType} or {lastType}",i.STRING],fileValidateTypeLabelExpectedTypesMap:[{},i.OBJECT],fileValidateTypeDetectType:[null,i.FUNCTION]}}};return"undefined"!=typeof window&&void 0!==window.document&&document.dispatchEvent(new CustomEvent("FilePond:pluginloaded",{detail:e})),e}();
