var isFormValidatedWithoutError=function(){"use strict";return async function(e){if("undefined"!=typeof validateForm&&!validateForm({form:e}))return new Promise(((e,a)=>{a(new Error("Form is not valid"))}));const a=document.getElementById(e);a.classList.add("pos-rel","form-loading");let t=new FormData(document.getElementById(`form-${e}`));const n=window.bf_globals[e],{grecaptcha:o}=window;if("v3"===n?.gRecaptchaVersion&&n?.gRecaptchaSiteKey){const e=await o.execute(n?.gRecaptchaSiteKey,{action:"submit"});t.append("g-recaptcha-response",e)}"undefined"!=typeof advancedFileHandle&&(t=advancedFileHandle(n,t)),n.GCLID&&t.set("GCLID",n.GCLID);const i=[];Object.entries(n?.fields||{}).forEach((e=>{e[1]?.valid?.hide&&i.push(e[0])})),i.length&&t.append("hidden_fields",i);const r=new URL(n.ajaxURL);r.searchParams.append("action","bitforms_before_submit_validate");const s=await fetch(r,{method:"POST",body:t}),d=await s.json();return a.classList.remove("pos-rel","form-loading"),d.success?new Promise((e=>{e(!0)})):(bfValidationErrMsg(d,e),new Promise(((e,a)=>{a(new Error("Form is not valid"))})))}}();
